@namespace Client.Components.Common
@inject IState<DevModeState> DevModeState
@inject IDispatcher Dispatcher

@if (isEditing)
{
    <TreeViewItemEditComponent Value="@Record.Name" OnSubmit="EditRecord" OnAbort="() => isEditing = false" />
}
else
{
    <DropTarget T="RecordMainInfoViewModel" Drop="(record) => Dispatcher.Dispatch(new MoveCourseRecordAction(record, Record, null))">
        <Draggable Data="Record">
            <div class="node-content group">
                <div class="node-content-title" @onclick="ToggleDisplay">
                    <i class="fa fa-chevron-right" style=@(Display ? "transform: rotate(90deg); margin-right: 10px;" : "")></i>
                    <span> @(DevModeState.Value.Enabled ? $"<{Record.Name}>" : Record.Name)</span>
                </div>
                @if (DevModeState.Value.Enabled)
                {
                    <TreeViewItemMenuComponent OnAdd="() => isAdding = true" OnEdit="() => isEditing = true"
                                               OnDelete="() => Dispatcher.Dispatch(new RemoveCourseRecordAction(Record))"
                                               WithEditing="Record.Type != RecordType.Root"
                                               WithDeleting="Record.Type !=RecordType.Root" />
                }
            </div>
        </Draggable>
    </DropTarget>
}
<div class="node-child">
    @if (isAdding)
    {
        <TreeViewNewItemComponent OnSubmit="@AddRecord" OnAbort="() => isAdding = false" />
    }
    @if (Record.Children.Count > 0 && Display)
    {

        @foreach (var record in Record.Children)
        {
            <TreeViewItemComponent Record="record" ActiveRecords="ActiveRecords" />
        }
    }
</div>
@if (DevModeState.Value.Enabled && Record.Type == RecordType.Group)
{
    <DropTarget T="RecordMainInfoViewModel" Drop="(record) => Dispatcher.Dispatch(new MoveCourseRecordAction(record, null, Record))">
        <div class="node-content node-content-title">
            <span>@($"</{Record.Name}>")</span>
        </div>
    </DropTarget>
}

@code {
    [Parameter]
    public RecordMainInfoViewModel Record { get; set; }

    [Parameter]
    public List<RecordMainInfoViewModel> ActiveRecords { get; set; }

    private bool Display = false;
    private bool isAdding = false;
    private bool isEditing = false;

    private void ToggleDisplay()
    {
        Display = !Display;
        StateHasChanged();
    }

    private void AddRecord(RecordMainInfoViewModel record)
    {
        Dispatcher.Dispatch(new AddCourseRecordAction(record, Record));
        isAdding = false;
    }

    private void EditRecord(string Name)
    {
        Record.Name = Name;
        Dispatcher.Dispatch(new EditCourseRecordAction(Record));
        isEditing = false;
    }

    protected override void OnParametersSet()
    {
        Display |= ActiveRecords.Any(r => r.Id == Record.Id);
    }
}
