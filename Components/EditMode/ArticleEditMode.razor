@inherits FluxorComponent
@inject IState<ArticleState> ArticleState
@inject IState<CourseState> CourseState
@inject DialogService DialogService
@inject IDispatcher Dispatcher
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-between align-items-center flex-wrap">
    <h1 class="mdc-typography--headline3">@ArticleState.Value.CurrentArticle.Title</h1>
    <div style="display: flex; flex-wrap: wrap">
        <MBButton ButtonStyle="MBButtonStyle.ContainedUnelevated" class="mdc-theme--on-primary mdc-theme--primary-bg" Label="Commit" style="margin-right: 7px;" @onclick="AddCommit" />
        <MBButton ButtonStyle="MBButtonStyle.ContainedUnelevated" class="mdc-theme--on-primary mdc-theme--primary-bg" Label="Open in Workbanch" style="margin-right: 5px;"
                  @onclick="OpenInWorkbanch" />
        <MBButton ButtonStyle="MBButtonStyle.ContainedUnelevated" LeadingIcon="arrow_back" class="mdc-theme--on-secondary mdc-theme--secondary-bg" Label="To Article"
                  @onclick="@(() => NavigationManager.NavigateTo($"/courses/{CourseState.Value.CurrentCourse.Id}/{ArticleState.Value.CurrentArticle.Id}"))" />
    </div>
</div>
<RadzenHtmlEditor @bind-Value="articleContent" Execute="OnExecute" UploadUrl="upload/image" class="mdc-typography--body1" Style="margin-bottom: 30px; min-height: 60vh; max-height: calc(100vh - 240px); padding: 2px;"  Change="OnChange">
    <RadzenHtmlEditorUndo />
    <RadzenHtmlEditorRedo />
    <RadzenHtmlEditorSeparator />
    <RadzenHtmlEditorBold />
    <RadzenHtmlEditorItalic />
    <RadzenHtmlEditorUnderline />
    <RadzenHtmlEditorStrikeThrough />
    <RadzenHtmlEditorSeparator />
</RadzenHtmlEditor>

<NewCommitDialogComponent @ref="NewCommitDialog" ArticleId="ArticleState.Value.CurrentArticle.Id"
                          PrevCommitId="ArticleState.Value.CurrentArticle.CurrentCommitId"
                          Content="@articleContent"/>

<style>
    .rz-dialog {
        width: 100vw;
        height: 100%;
        max-width: 100vw;
    }

    .rz-html-editor-toolbar {
        position: sticky;
        top: 50px;
    }

    .article-title-edit {
        padding: 0;
        line-height: 1.2;
        font-size: 2.25rem;
        font-weight: bold;
        border: none;
        width: 100%;
        margin: 0 0 0.5rem 0;
    }

    .article-content-edit {
        border: none;
        font-family: inherit;
    }

    input:focus {
        border: none;
        outline: none;
    }
</style>

@code {
        string articleTitle = "";
        string articleContent = "";


    private NewCommitDialogComponent NewCommitDialog;

    async Task OnExecute(HtmlEditorExecuteEventArgs args)
    {
        if (args.CommandName == "SaveContent")
        {
            await args.Editor.ExecuteCommandAsync(HtmlEditorCommands.InsertHtml, "");
            Dispatcher.Dispatch(new SaveArticleContentAction(ArticleState.Value.CurrentArticle.Id,
                ArticleState.Value.CurrentArticle.CurrentCommitId, articleContent));
        }
    }

    private void OnChange(string arg)
    {
        Console.WriteLine(arg.Replace("><", "> <"));
    }

    async Task InsertImageFromList(RadzenHtmlEditor editor)
    {
        await editor.SaveSelectionAsync();

        var result = await DialogService.OpenAsync<HtmlEditorImgUploadComponent>("Select image file");

        await editor.RestoreSelectionAsync();

        if (result != null)
        {
            await editor.ExecuteCommandAsync(HtmlEditorCommands.InsertHtml, $"<img style=\"max-width: 100%\" src=\"{result}\">");
        }
    }

    protected override void OnInitialized()
    {
        SetContent(null, ArticleState.Value);
        ArticleState.StateChanged += SetContent;
        base.OnInitialized();
    }

    private async Task AddCommit()
    {
        await NewCommitDialog.ShowAsync();
    }

    private void OpenInWorkbanch()
    {
        var article = new WorkbanchArticleVM
        {
            Id = ArticleState.Value.CurrentArticle.Id,
            CourseId = CourseState.Value.CurrentCourse.Id,
            Title = ArticleState.Value.CurrentArticle.Title,
            Content = articleContent
        };
        Dispatcher.Dispatch(new ForkItemToWorkbanchAction(article, WorkbanchItemType.Article));
        NavigationManager.NavigateTo($"/workbanch/article/{ArticleState.Value.CurrentArticle.Id}");
    }

    private void SetContent(object sender, ArticleState state)
    {
        if (state.CurrentArticle != null)
        {
            articleTitle = state.CurrentArticle.Title;
            articleContent = state.CurrentArticle.Content;
        }
    }

    protected override void Dispose(bool disposing)
    {
        ArticleState.StateChanged -= SetContent;
        base.Dispose(disposing);
    }
}
