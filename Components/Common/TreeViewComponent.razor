@inject IState<DevModeState> DevModeState

@if (Records != null)
{
<div class="tree-container" style=@("font-size: " + FontSize ?? "17px")>
    @if (DevModeState.Value.Enabled)
    {
        <TreeViewGroupItemComponent ActiveRecords="ActiveRecords" Record="Records.FirstOrDefault(r => r.Type == RecordType.Root)"/>
    }
    else
    {
        foreach(var rec in Records.FirstOrDefault(r => r.Type == RecordType.Root)?.Children)
        {
            <TreeViewItemComponent Record="rec" ActiveRecords="ActiveRecords"/>
        }
    }
</div>
}

<style>
    .tree-container {
        position: relative;
        overflow: auto;
        width: 100%;
        height: 100%;
        padding: 10px;
    }

    .tree-container ul {
        padding: 0;
        margin: 0;
        list-style-type: none;
    }

        .tree-container .node-content.new-item-sample {
            color: rgba(12, 176, 143, 1);
            margin: 10px 10px 5px 10px;
            transition: 0.2s;
            border: 1px dashed #19AA8D;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .tree-container .node-content.new-item-sample i {
                font-size: 100%;
            }

            .tree-container .node-content.new-item-sample:hover {
                background: #eefdfa;
                box-shadow: 0px 0px 10px 0px rgba(12, 176, 143, 0.3);
            }

    .tree-container .node-content {
        position: relative;
        display: flex;
        -webkit-align-items: center;
        align-items: center;
        cursor: pointer;
        border-radius: 2px;
        transition: 0.3s ease;
        color: @Theme.ColorOptions.Body;
    }

        .tree-container .node-content:hover:not(.editor-wrapper) {
            background-color: #e3e3e3;
        }

        .tree-container .node-content.active {
            background-color: #dcdcdc;
        }

        .tree-container .node-content i {
            margin-right: 5px;
            transition: 0.3s ease;
            transform: rotate(0);
            font-size: 85%;
        }


        .tree-container .node-content.group:hover i {
            margin-right: 10px;
        }

    .node-content-title {
        display: flex;
        align-items: center;
        width: 100%;
        height: 100%;
        padding: 6px;
    }

    .node-content:hover .add-items-wrapper {
        display: flex;
    }

    .add-items-wrapper {
        display: none;
        position: absolute;
        right: 0;
    }

    .add-item {
        margin-right: 3px;
        width: 28px;
        height: 28px;
        border-radius: 50%;
        border: 1px solid silver;
        background: #ffffff;
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 0;
        font-size: 24px;
        opacity: 0.95;
    }

    .tree-container .node-child span {
        overflow-wrap: break-word;
    }

    .tree-container .node-child {
        padding-left: 20px;
    }

    .tree-container .editor-wrapper {
        box-shadow: 0px 0px 10px 0px rgba(12, 176, 143, 0.3);
        border: 1px solid rgba(12, 176, 143, 0.3);
        border-radius: 5px;
        padding: 0;
        color: rgba(12, 176, 143, 0.5);
    }

        .tree-container .editor-wrapper:focus-within {
            box-shadow: 0px 0px 15px 0px rgba(12, 176, 143, 0.5);
            outline: none;
        }
        .tree-container .editor-wrapper .edit-title {
            border: none;
            border-radius: 5px;
            padding: 4px 8px;
            width: 100%;
        }

        .tree-container .editor-wrapper form{
            display: flex;
            align-items: center;
            width: calc(100% - 60px);
        }

        .tree-container .editor-wrapper button {
            width: 30px;
            background: inherit;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0;
            border: 0;
        }

        .tree-container .editor-wrapper button:focus {
            outline: none;
        }

            .tree-container .editor-wrapper button.control-button {
                font-size: 25px;
            }
</style>

@code {
    [CascadingParameter(Name = "Theme")]
    public Theme Theme { get; set; }

    [Parameter]
    public string FontSize { get; set; }

    [Parameter]
    public List<RecordMainInfoViewModel> Records { get; set; } = new();

    [Parameter]
    public List<RecordMainInfoViewModel> ActiveRecords { get; set; } = new();

    protected override void OnParametersSet()
    {
        Console.WriteLine(Records?.Count + " from tree");
        //if(Records != null)
        //{
        //    foreach(var rec in Records)
        //        Console.WriteLine(rec.Name + " : " + rec.Children?.Count);
        //}
        base.OnParametersSet();
    }

    protected override bool ShouldRender()
    {
        return true;
    }
}
