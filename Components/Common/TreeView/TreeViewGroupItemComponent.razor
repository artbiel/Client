@namespace Client.Components.Common
@inject IDispatcher Dispatcher

@if (Editable)
{
    <DropTarget T="RecordVM" Drop="(record) => Dispatcher.Dispatch(new MoveWorkbanchCourseRecordAction(record, Record, null))">
        <Draggable Data="Record">
            <div class="node-content group">
                <div class="node-content-title" @onclick="ToggleDisplay">
                    <MBIcon IconName="chevron_right" style=@(Display ? "transform: rotate(90deg); margin-right: 10px;" : "")></MBIcon>
                    <span class="mdc-typography--overline">@($"<{Record.Title}>")</span>
                </div>
                <TreeViewItemMenuComponent Record="Record"
                                           WithEditing="Record.Type != RecordType.Root"
                                           WithDeleting="Record.Type !=RecordType.Root" />
            </div>
        </Draggable>
    </DropTarget>
}
else
{
    <div class="node-content group">
        <div class="node-content-title" @onclick="ToggleDisplay">
            <MBIcon IconName="chevron_right" style=@(Display ? "transform: rotate(90deg); margin-right: 10px;" : "")></MBIcon>
            <span class="mdc-typography--overline">@Record.Title</span>
        </div>
    </div>
}

<div class="node-child">
    @if (Record.Children.Count > 0 && Display)
    {

        @foreach (var record in Record.Children)
        {
            <TreeViewItemComponent Record="record" ActiveRecords="ActiveRecords" />
        }
    }
</div>
@if (Editable && Record.Type == RecordType.Group)
{
    <DropTarget T="RecordVM" Drop="(record) => Dispatcher.Dispatch(new MoveWorkbanchCourseRecordAction(record, null, Record))">
        <div class="node-content node-content-title">
            <span class="mdc-typography--overline">@($"</{Record.Title}>")</span>
        </div>
    </DropTarget>
}


@code {
    [Parameter]
    public RecordVM Record { get; set; }

    [Parameter]
    public List<RecordVM> ActiveRecords { get; set; }

    [CascadingParameter]
    public bool Editable { get; set; }

    private bool Display = false;

    private void ToggleDisplay()
    {
        Display = !Display;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        Display |= ActiveRecords == null || ActiveRecords.Any(r => r.Id == Record.Id);
    }
}
