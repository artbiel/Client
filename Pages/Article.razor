@page "/courses/{courseId:guid}/{articleId:guid}/{param?}"
@inherits FluxorComponent
@inject IState<ArticleState> ArticleState
@inject IState<CourseState> CourseState
@inject IState<RightSidebarState> RightSidebarState
@inject DialogService DialogService
@inject IDispatcher Dispatcher
@inject NavigationManager NavigationManager

@if (ArticleState.Value.IsLoading)
{
    <LoadingComponent />
}
else
{
    if (ArticleState.Value.CurrentArticle == null)
    {
        <NotFoundComponent />
    }
    else
    {
        <div class=@("article-wrapper" + (RightSidebarState.Value.IsDisplay ? " article-wrapper-with-sidebar" : ""))>
            <nav aria-label="breadcrumb" class="article-breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <NavLink href="@("/courses/" + CourseState.Value.CurrentCourse.Id)" class="mdc-typography--overline">
                            @CourseState.Value.CurrentCourse.Title
                        </NavLink>
                    </li>
                    @foreach (var r in CourseState.Value.ActiveRecords.Skip(1))
                    {
                        <li class="breadcrumb-item mdc-typography--overline">@r.Title</li>
                    }
                </ol>
            </nav>
            @if (isEditing)
            {
                <ArticleEditMode />
            }
            else
            {
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="mdc-typography--headline3">@ArticleState.Value.CurrentArticle.Title</h1>

                    <MBButton ButtonStyle="MBButtonStyle.ContainedUnelevated" class="mdc-theme--on-primary mdc-theme--primary-bg" Label="Edit"
                              @onclick="@(() => NavigationManager.NavigateTo($"/courses/{CourseId}/{ArticleId}/edit"))" />
                </div>
                <div class="mdc-typography">
                    @(new MarkupString(ArticleState.Value.CurrentArticle.Content))
                </div>
            }
        </div>
        <ArticleSidebarComponent />
    }
}

@code {

    [Parameter]
    public Guid CourseId { get; set; }

    [Parameter]
    public Guid ArticleId { get; set; }

    [Parameter]
    public string Param { get; set; }

    private bool isEditing { get; set; }

    protected override void OnParametersSet()
    {
        if (ArticleId != ArticleState.Value.CurrentArticle?.Id)
        {
            Dispatcher.Dispatch(new FetchArticleAction(CourseId, ArticleId, null));
        }
        isEditing = Param == "edit";
        base.OnParametersSet();
    }

    protected override void Dispose(bool disposing)
    {
        Dispatcher.Dispatch(new ClearArticleStateAction());
        base.Dispose(disposing);
    }
}
