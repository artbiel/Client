@inherits FluxorComponent
@inject IState<DevModeState> DevModeState
@inject IState<RightSidebarState> RightSidebarState
@inject IDispatcher Dispatcher


<div class="header">
    <button class="sidebar-toggle d-flex justify-content-center" @onclick="() => Dispatcher.Dispatch(new ToggleLeftSidebarAction())">
        <RadzenIcon Icon="menu"></RadzenIcon>
    </button>
    <div class="d-flex">
        <div class="edit-toggler-wrapper">
            <label class="switch">
                <input type="checkbox" class="default" id="editmodetoggler" value="@DevModeState.Value.Enabled"
                       @onchange="(args) => Dispatcher.Dispatch(new ChangeDevModeAction((bool)args.Value))" />
                <span class="slider round"></span>
            </label>
            <div class="checkbox-title">
                <label class=@(DevModeState.Value.Enabled ? "checked" : "") for="editmodetoggler" style="cursor: pointer">Dev Mode</label>
            </div>
        </div>
        @if (RightSidebarState.Value.Exists)
        {
        <button class="nav-button" @onclick="() => Dispatcher.Dispatch(new ToggleRightSidebarAction())">
            <RadzenIcon Icon="more_horiz"></RadzenIcon>
        </button>
        }
    </div>
</div>

<style>

    .nav-button {
        display: flex;
        -webkit-justify-content: center;
        justify-content: center;
        border: none;
        padding: 0.8125rem;
        border-left: 1px solid #eaeef0;
        background-color: #ffffff;
        color: #000;
    }

    .nav-button:focus{
        outline: none;
    }

    .checkbox-title {
        margin-left: 5px;
        font-size: 16px;
        line-height: 16px;
        font-weight: 500;
    }

    .checked {
        font-weight: 600;
        text-shadow: 0px 0px 30px rgba(12, 176, 143, 1);
        color: #2E2E2E;
    }

    .edit-toggler-wrapper {
        display: flex;
        -webkit-align-items: center;
        align-items: center;
        -webkit-justify-content: center;
        justify-content: center;
        margin-right: 15px;
    }

        .switch {
            position: relative;
            display: inline-block;
            min-width: 30px;
            width: 30px;
            height: 21px;
            float: right;
        }

        .switch input {
            display: none;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: 0.3s;
        transition: 0.3s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 3px;
            top: 2px;
            background-color: white;
            -webkit-transition: .3s;
            transition: .3s;
        }

    input:checked + .slider {
        background-color: #19aa8d;
        -webkit-box-shadow: 0px 0px 15px 2px rgba(12, 176, 143, 0.3);
        -moz-box-shadow: 0px 0px 15px 2px rgba(12, 176, 143, 0.3);
        box-shadow: 0px 0px 15px 2px rgba(12, 176, 143, 0.3);
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(8px);
        -ms-transform: translateX(14px);
        transform: translateX(8px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 24px;
    }

        .slider.round:before {
            border-radius: 50%;
        }



    .header {
        z-index: 200;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background-color: #ffffff;
        min-height: 3.125rem;
        border-bottom: 1px solid #eaeef0;
        color: #212529;
        -webkit-box-shadow: none;
        box-shadow: none;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
</style>