@page "/courses/{courseId:int}/{articleId:int}"
@inherits FluxorComponent
@inject IState<ArticleState> ArticleState
@inject IState<CourseState> CourseState
@inject IState<RightSidebarState> RightSidebarState
@inject IState<DevModeState> DevModeState
@inject DialogService DialogService
@inject IDispatcher Dispatcher


@if (ArticleState.Value.IsLoading)
{
    <LoadingComponent />
}
else
{
    if (ArticleState.Value.CurrentArticle == null)
    {
        <NotFoundComponent />
    }
    else
    {
        <div class=@("article-wrapper" + (RightSidebarState.Value.IsDisplay ? " article-wrapper-with-sidebar" : ""))>
            <nav aria-label="breadcrumb" class="article-breadcrumb">
                <ol class="breadcrumb">
                    <li class=@("breadcrumb-item" + (DevModeState.Value.Enabled ? " dev" : ""))>
                        <NavLink href="@("/courses/" + CourseState.Value.CurrentCourse.Id)">
                            @CourseState.Value.CurrentCourse.Name
                        </NavLink>
                    </li>
                    @foreach (var r in CourseState.Value.ActiveRecords.Skip(1))
                    {
                        <li class="breadcrumb-item active">@r.Name</li>
                    }
                </ol>
            </nav>
            @if (DevModeState.Value.Enabled)
            {
                <ArticleEditMode />
            }
            else
            {
                <div class="d-flex justify-content-between align-items-center">
                    <h1>@ArticleState.Value.CurrentArticle.Title</h1>
                </div>
                @string.Join("", ArticleState.Value.CurrentWords)
            }
        </div>
    }
    <ArticleSidebarComponent />
}

@code {

    [Parameter]
    public int CourseId { get; set; }

    [Parameter]
    public int ArticleId { get; set; }

    protected override void OnInitialized()
    {
        DevModeState.StateChanged += SubscribeDevModeState;
        ArticleState.StateChanged += SubscribeArticleState;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (ArticleId != ArticleState.Value.CurrentArticle?.Id)
        {
            Dispatcher.Dispatch(new FetchArticleAction(CourseId, ArticleId, DevModeState.Value.Enabled));
        }
        base.OnParametersSet();
    }

    protected override void Dispose(bool disposing)
    {
        DevModeState.StateChanged -= SubscribeDevModeState;
        ArticleState.StateChanged -= SubscribeArticleState;
        Dispatcher.Dispatch(new ClearArticleStateAction());
        Dispatcher.Dispatch(new ClearPageTitleAction());
        base.Dispose(disposing);
    }

    private void SubscribeArticleState(object sender, ArticleState state)
    {
        if (ArticleState.Value.CurrentArticle != null)
        {
            Dispatcher.Dispatch(new SetPageTitleAction(state.CurrentArticle.Title));
        }
    }

    private void SubscribeDevModeState(object sender, DevModeState state)
    {
        Dispatcher.Dispatch(new FetchArticleAction(CourseId, ArticleId, DevModeState.Value.Enabled));
        if (ArticleState.Value.CurrentArticle != null)
            Dispatcher.Dispatch(new SetPageTitleAction(ArticleState.Value.CurrentArticle.Title));
    }
}
