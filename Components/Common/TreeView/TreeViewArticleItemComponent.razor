@namespace Client.Components.Common
@inject IState<CourseState> CourseState
@inject IDispatcher Dispatcher

@if (Editable)
{
    <DropTarget T="RecordVM" Drop="(record) => Dispatcher.Dispatch(new MoveWorkbanchCourseRecordAction(record, null, Record))">
        <Draggable Data="Record">
            <div class=@("node-content" + (ActiveRecords != null && ActiveRecords.Any(r => r.Id == Record.Id) ? " active" : ""))>
                <NavLink class="node-content-title" href=@($"/workbanch/article/{Record.Id}")>
                    <MBIcon IconName="article"></MBIcon>
                    <span class="mdc-typography--overline">@Record.Title</span>
                </NavLink>
                <TreeViewItemMenuComponent WithEditing="false" WithAdding="false"
                                           Record="Record" />
            </div>
        </Draggable>
    </DropTarget>
}
else
{
    <div class=@("node-content" + (ActiveRecords != null && ActiveRecords.Any(r => r.Id == Record.Id) ? " active" : ""))>
        <NavLink class="node-content-title" href=@($"/courses/{CourseState.Value.CurrentCourse.Id}/{Record.Id}")>
            <MBIcon IconName="article"></MBIcon>
            <span class="mdc-typography--overline">@Record.Title</span>
        </NavLink>
    </div>
}

@code {
    [Parameter]
    public RecordVM Record { get; set; }

    [Parameter]
    public List<RecordVM> ActiveRecords { get; set; }

    [CascadingParameter]
    public bool Editable { get; set; }
}
