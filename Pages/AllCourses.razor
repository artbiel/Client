@page "/courses"
@inherits FluxorComponent
@inject IState<CoursesState> CoursesState
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher

<div class="mdc-layout-grid">
    <div class="mdc-layout-grid__inner">
        <div class="mdc-layout-grid__cell--span-12 d-flex justify-content-between align-items-center flex-wrap">
            <h1 class="mdc-typography--headline2">Courses</h1>
            @*<MBButton ButtonStyle="MBButtonStyle.ContainedUnelevated" LeadingIcon="add" class="mdc-theme--on-primary mdc-theme--primary-bg" Label="Create"
                      @onclick="async () => await NewCourseDialog.ShowAsync()" />*@
        </div>
        <MBDebouncedTextField Value="@CoursesState.Value.SearchString"
                              ValueChanged="(string val) => Dispatcher.Dispatch(new SetCoursesSearchStringAction(val))"
                              class="mdc-layout-grid__cell--span-12"
                              DebounceInterval="@debouncedInterval"
                              Label="Search"
                              TextInputStyle="MBTextInputStyle.Outlined"
                              Density="MBDensity.Comfortable" />
        @*<MBSelect Value="@CoursesState.Value.SearchType"
                  ValueChanged="(CourseSearchType type) => Dispatcher.Dispatch(new SetCoursesSearchTypeAction(type))"
                  class="mdc-layout-grid__cell--span-2"
                  Items="SearchTypeValues"
                  ItemValidation="@MBItemValidation.NoSelection"
                  Density="MBDensity.Comfortable"
                  SelectInputStyle="MBSelectInputStyle.Outlined" />*@

    </div>
</div>
@if (CoursesState.Value.IsLoading)
{
    <LoadingComponent />
}
else
{
    if (CoursesState.Value.Courses == null)
    {
        <NotFoundComponent />
    }
    else
    {
        <div class="mdc-layout-grid">
            <div class="mdc-layout-grid__inner">
                @if (CoursesState.Value.Courses.Count > 0)
                {
                    @foreach (var course in CoursesState.Value.Courses)
                    {
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBCard AutoStyled="true"
                                    class="mb-basic-with-text-over-media"
                                    @onclick="@(() => NavigationManager.NavigateTo($"courses/{course.Id}"))">
                                <PrimaryAction>
                                    <div class="mdc-card__media mdc-card__media--16-9 mb-card__media" style=@($"background-image: url('{course.ImgSrc}')")></div>
                                    <div class="mb-card__autostyled">
                                        <h2 class="mb-card__title mdc-typography mdc-typography--headline6">@course.Title</h2>
                                    </div>
                                    @*<div class="mb-card__secondary mdc-typography mdc-typography--body2">@course.ShortDescription</div>*@
                                </PrimaryAction>
                            </MBCard>
                        </div>
                    }
                }
                else
                {
                    <div class="mdc-layout-grid__cell--span-12">
                        <NotFoundComponent />
                    </div>
                }
            </div>
        </div>
    }
}

<NewCourseDialogComponent @ref="NewCourseDialog"/>

<style>

    a:hover{
        text-decoration: none;
    }

    .course-item {
        padding: 10px;
        border-radius: 0px;
        display: flex;
        -ms-flex-wrap: wrap;
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;
        -webkit-align-items: center;
        align-items: center;
        justify-content: space-between;
        transition: 0.2s ease;
    }

        .course-item:hover {
            border: none;
            border-radius: 5px;
            background-color: #eaeaea;
        }

        .course-item img {
            height: 60px;
            width: 60px;
            object-fit: cover;
            border-radius: 50%;
        }

        .course-item .course-head, .course-tail{
            display: flex;
            align-items: center;
            justify-content: left;
        }

        .course-item .course-head .course-title{
            margin-left: 10px;
            font-size: 25px;
            color: @Theme.ColorOptions.Body;
        }

    hr {
        margin: 1px 0px;
    }
</style>

@code {

    [CascadingParameter(Name = "Theme")]
    public Theme Theme { get; set; }

    private NewCourseDialogComponent NewCourseDialog;

    private int debouncedInterval = 500;

    MBSelectElement<CourseSearchType>[] SearchTypeValues = Enum.GetValues<CourseSearchType>()
        .Select(v => new MBSelectElement<CourseSearchType> { Label = Enum.GetName(v), SelectedValue = v }).ToArray();

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new FetchCoursesItemsAction(CoursesState.Value.SearchString, CoursesState.Value.SearchType));
        base.OnInitialized();
    }
}
