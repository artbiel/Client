@inherits FluxorComponent
@inject IState<RightSidebarState> State

<div class="right-bar-container">
    @*<div class="bar-toogler-wrapper">
        <button class="sidebar-toggle d-flex justify-content-center rounded-circle bar-toogler"
                @onclick="() => Dispatcher.Dispatch(new ToggleRightSidebarAction())">
            <i class=@("fa fa-share " + (State.Value.IsDisplay ? "" : "mirrored"))></i>
        </button>
    </div>*@
    @ChildContent
</div>

<style>
    .right-bar-container {
        background-color: @Theme.BackgroundOptions.Body;
        width: @Width;
        min-width: 200px;
        max-width: 100vw;
        position: fixed;
        height: calc(100vh - 50px);
        z-index: 1;
        top: 50px;
        right: @(State.Value.IsDisplay ? "0" : $"min(-{Width}, -250px)");
        border-left: 1px solid #DBE0E2;
        transition: 0.5s ease;
    }

    .bar-toogler-wrapper{
        position: absolute;
        top: 5px;
        left: @(State.Value.IsDisplay ? "-42px" : "-60px");
        transition: left 0.5s ease;
    }

    .bar-toogler {
        z-index: 10000;
        margin: 0;
        font-size: 20px;
        height: 50px;
        width: 50px;
        border: 1px solid #DBE0E2;
        cursor: pointer;
        position: fixed;
    }

    .bar-toogler i{
        transition: transform 0.5s ease;
    }

    .mirrored {
        transform: scaleX(-1);
    }
</style>

@code {

    [CascadingParameter(Name = "Theme")]
    public Theme Theme { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Width { get; set; } = "250px";

}
