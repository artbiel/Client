@page "/courses/{courseId:guid}"
@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<CourseState> CourseState
@inject NavigationManager NavigationManager

@if (CourseState.Value.IsLoading)
{
    <LoadingComponent />
}
else
{
    @if (CourseState.Value.CurrentCourse == null)
    {
        <NotFoundComponent />
    }
    else
    {
        <div class="mdc-layout-grid">
            <div class="mdc-layout-grid__inner">
                <div class="mdc-layout-grid__cell--span-12">
                    <MBCard AutoStyled="true"
                            style="padding: 15px;"
                            class="mb-ui-control">
                        <Primary>
                            <div style="display: flex; flex-direction: row;">
                                <div class="mdc-card__media mb-card__media rounded-img">
                                    <img src="@CourseState.Value.CurrentCourse.ImgSrc" class="rounded-img" />
                                </div>
                                <div class="mb-card__autostyled" style="width: 100%;">
                                    <div class="d-flex justify-content-between align-items-center flex-wrap" style="width: 100%;">
                                        <h1 class="mdc-typography--headline3">@CourseState.Value.CurrentCourse.Title</h1>
                                        <MBButton ButtonStyle="MBButtonStyle.ContainedUnelevated" class="mdc-theme--on-primary mdc-theme--primary-bg" Label="Open in Workbanch"
                                                  @onclick="OpenInWorkbanch" />
                                    </div>
                                    <RatingComponent Rating="@CourseState.Value.CurrentCourse.Rating.Rating" Total="CourseState.Value.CurrentCourse.Rating.VotersCount" />
                                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">Difficulty: @CourseState.Value.CurrentCourse.Difficulty</h3>
                                </div>
                            </div>
                            <div class="mb-card__autostyled">

                                <h6 class="mb-card__title mdc-typography mdc-typography--headline6">Description</h6>
                                <span class="mb-card__subtitle mdc-typography mdc-typography--body2">@CourseState.Value.CurrentCourse.Description</span>
                            </div>
                        </Primary>
                    </MBCard>
                </div>
                <div class="mdc-layout-grid__cell--span-6">
                    <MBCard AutoStyled="true"
                            class="mb-ui-control">
                        <Primary>
                            <h3 class="mdc-typography mdc-typography--headline5" style="text-align: center">Course structure</h3>
                            <TreeViewComponent RootRecord="CourseState.Value.CurrentCourse.RootRecord" FontSize="19px" />
                        </Primary>
                    </MBCard>
                </div>
                <div class="mdc-layout-grid__cell--span-6">
                    <MBCard AutoStyled="true"
                            class="mb-ui-control">
                        <Primary>
                            <h3 class="mdc-typography mdc-typography--headline5" style="text-align: center">Course history</h3>
                            @if (CourseState.Value.Commits != null)
                            {
                                <HistoryBranchComponent Commits="CourseState.Value.Commits?.Reverse<BaseCommit>().ToList()"
                                                        ActiveCommitId="CourseState.Value.Commits.First().Id"
                                                        GetIcon="GetHistoryItemIcon" />
                            }
                            else
                            {
                                <LoadingComponent />
                            }
                        </Primary>
                    </MBCard>
                </div>
            </div>
        </div>
    }
}

<style>
    .course-wrapper{
        background-color: @Theme.BackgroundOptions.Body;
        width: 100%;
        transition: width 0.5s ease;
        z-index: 200;
        min-width: 200px;
    }

    .rounded-img {
        height: 150px;
        width: 150px;
        object-fit: cover;
        border-radius: 50%!important;
    }

    .course-header .main-info{
        padding: 10px;
    }

        .course-header .main-info > div{
            padding: 2px 5px;
        }

        .course-header .main-info .badges > span {
            padding: 5px;
        }

    .course-body-wrapper {
        margin: 20px 10px;
    }

    .course-description-wrapper {
        padding: 1.25rem;
        margin-top: 1.25rem;
        margin-bottom: 1.25rem;
        border: 1px solid #eee;
        border-left-width: .25rem;
        border-radius: .25rem;
        border-left-color: @Theme.SideBarOptions.Color
    }

</style>

@code{

    [CascadingParameter(Name = "Theme")]
    public Theme Theme { get; set; }



    [Parameter]
    public Guid CourseId { get; set; }

    private void OpenInWorkbanch()
    {
        Dispatcher.Dispatch(new ForkItemToWorkbanchAction(CourseState.Value.CurrentCourse, WorkbanchItemType.Course));
        NavigationManager.NavigateTo($"/workbanch/course/{CourseState.Value.CurrentCourse.Id}");
    }

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new FetchCourseAction(CourseId));
        base.OnInitialized();
    }

    private string GetHistoryItemIcon(BaseCommit commit) =>
       (commit as CourseCommitMainInfoVM).Type switch
       {
           CourseCommitType.Changed => "edit",
           CourseCommitType.Added => "add",
           CourseCommitType.Deleted => "delete",
           _ => ""
       };
}


