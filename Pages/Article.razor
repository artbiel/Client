@page "/courses/{courseId:int}/{articleId:int}"
@inherits FluxorComponentWithRightSidebar
@inject IState<ArticleState> ArticleState
@inject IState<CourseState> CourseState
@inject IState<RightSidebarState> RightSidebarState
@inject IState<DevModeState> DevModeState
@inject DialogService DialogService


@if (ArticleState.Value.IsLoading)
{
    <LoadingComponent />
}
else
{
    <div class="article-wrapper">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <NavLink href="@("/courses/" + CourseState.Value.CurrentCourse.Id)">
                        @CourseState.Value.CurrentCourse.Name
                    </NavLink>
                </li>
                @foreach (var r in ArticleState.Value.ActiveRecords.Skip(1))
                {
                    <li class="breadcrumb-item active">@r.Name</li>
                }
            </ol>
        </nav>
        <div class="d-flex justify-content-between align-items-center">
            <h1>@ArticleState.Value.CurrentArticle.Title</h1>
            @if (DevModeState.Value.Enabled)
            {
                <button class="edit-btn">Edit</button>
            }
        </div>
        @string.Join("", ArticleState.Value.CurrentWords)
        <ArticleSidebarComponent />
    </div>
}

<style>
    .edit-btn {
        color: #f0f0f0;
        height: 40px;
        font-size: 16px;
        font-weight: bold;
        background: #19aa8d;
        border-radius: 3px;
        border: none;
        padding: 0 20px;
        outline: none !important;
    }

    .article-wrapper {
        transition: 0.5s ease;
        width: @(RightSidebarState.Value.IsDisplay ? "calc(100% - 300px)" : "100%");
        min-width: inherit;
    }

    .breadcrumb-item a {
        color: #007bff;
    }

    p {
        font-size: 17px;
        line-height: 27px;
        margin: 0;
        clear: both;
    }

        p + p {
            margin-top: 27px;
        }
</style>

@code {

    [Parameter]
    public int CourseId { get; set; }

    [Parameter]
    public int ArticleId { get; set; }

    private bool articleChanged = true;

    protected override void OnParametersSet()
    {
        articleChanged = ArticleId != ArticleState.Value.CurrentArticle?.Id;
        if (articleChanged)
            Dispatcher.Dispatch(new FetchArticleAction(CourseId, ArticleId));
    }
}
